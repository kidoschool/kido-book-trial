{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/kido3/Desktop/Kido/kido-book-trial/src/pages/Backend/CreateGroup/CreateGroup.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport Axios from 'axios';\nimport style from './CreateBoard.module.css';\nimport { AuthContext } from '../../../context/Auth';\nimport { withRouter, useHistory } from \"react-router-dom\";\n\nconst CreateBoard = props => {\n  _s();\n\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const [formComplete, setFormComplete] = useState(false);\n  const [formIncompleteError, setFormIncompleteError] = useState(false);\n  const [isBoardAdded, setIsBoardAdded] = useState(false);\n  const [nameOfboards, setNameOfboards] = useState(\"\");\n  const [teamMembers, setTeamMembers] = useState(\"\"); // const [typeOfBoards, setTypeOfBoards] = useState(\"\");\n\n  const NameOfboard = React.useRef();\n  const TeamMember = React.useRef(); // const TypeOfBoard  = React.useRef();\n\n  const userId = currentUser.uid; // to use history function\n\n  const history = useHistory();\n  useEffect(() => {\n    setIsBoardAdded(false);\n  }, [isBoardAdded]);\n\n  const addBoardToDBHandler = event => {\n    event.preventDefault();\n\n    if (NameOfboard.current.value.length === 0 || TeamMember.current.value.length === 0) {\n      setFormComplete(false);\n      setFormIncompleteError(true);\n    } else {\n      // add column name in firebase\n      Axios.post(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents.json`, {\n        boardName: nameOfboards,\n        // boardType: typeOfBoards,\n        members: teamMembers\n      }).then(response => {\n        alert(\"Group added succesfully\");\n        history.push(\"/backendhome\");\n        setIsBoardAdded(true);\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper d-flex align-items-stretch\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.CreateMain,\n      children: [formIncompleteError ? /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: \"Kindly complete the form before adding the Group\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 32\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.CreateTitle,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Create a Board\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: addBoardToDBHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: style.Createlable,\n            children: \"Enter a name of your board:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"name\",\n            type: \"text\",\n            name: \"name\",\n            placeholder: \"eg Agile Sprint Board\",\n            ref: NameOfboard,\n            onChange: event => setNameOfboards(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: style.Createlable,\n            children: \"Add your team members:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"team\",\n            type: \"text\",\n            name: \"team\",\n            placeholder: \"Add your team (separated by commas)\",\n            ref: TeamMember,\n            onChange: event => setTeamMembers(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          id: \"CreateBoard\",\n          className: style.CreateButton,\n          disabled: formComplete,\n          children: \"create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}; // class CreateBoard extends Component {\n//     constructor(props){\n//         super(props);\n//         this.NameOfboard = React.createRef();\n//         this.TeamMember = React.createRef();\n//         this.TypeOfBoard = React.createRef();\n//         this.currentUser = useContext(AuthContext);\n//         this.userId = currentUser.uid;\n//     }\n//     state = {\n//         formComplete : false,\n//         formIncompleteError : false,\n//         selectedBoard : {}\n//     }\n//     componentDidMount() {\n//         Axios.get(`https://pro-organiser-app.firebaseio.com/boardContents/${userId}.json`)\n//             .then(response => {\n//                 console.log(response);\n//                 this.setState({\n//                     boardContents: response.data\n//                 })\n//             })\n//             .catch(error => {console.log(error)});\n//     }\n//     addBoardToDBHandler = (event) => {\n//         event.preventDefault();\n//         if(this.NameOfboard.current.value.length === 0 || this.TeamMember.current.value.length === 0 || this.TypeOfBoard.current.value.length === 0){\n//             this.setState({\n//                 formComplete : false,\n//                 formIncompleteError : true\n//             })\n//         }else{\n//             let selectedBoard = {...this.state.selectedBoard}\n//             selectedBoard.boardName = this.NameOfboard.current.value;\n//             selectedBoard.members = this.TeamMember.current.value;\n//             selectedBoard.boardType = this.TypeOfBoard.current.value;\n//             Axios.post('https://pro-organiser-app.firebaseio.com/boardContents.json', selectedBoard)\n//                 .then(response => {\n//                     alert(\"Board added succesfully\");\n//                                    this.props.history.push('/');\n//                         }).catch(error => {console.log(error)});\n//                     }\n//                 }\n//     render() {\n//     return (\n//         <div className={style.CreateMain}>\n//             {this.state.formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding the Board</p> : null}\n//             <div className={style.CreateTitle}>\n//             <span>Create a Board</span>\n//             </div>\n//             <form onSubmit={this.addBoardToDBHandler}>\n//             <label>\n//                 <div className={style.Createlable}>Enter a name of your board:</div>\n//                 <input id=\"name\" type=\"text\" name=\"name\" placeholder=\"eg Agile Sprint Board\" ref={this.NameOfboard} />\n//             </label>\n//             <label>\n//                 <div className={style.Createlable}>Add your team members:</div>\n//                 <input id=\"team\" type=\"text\" name=\"team\" placeholder=\"Add your team (separated by commas)\" ref={this.TeamMember} />\n//             </label>\n//             <label>\n//                 <div className={style.Createlable}>Enter the type of your board:</div>\n//                 <input id=\"type\" type=\"text\" name=\"type\" placeholder=\"eg Design UX\" ref={this.TypeOfBoard} />\n//             </label>\n//             <button type=\"submit\" id=\"CreateBoard\" className={style.CreateButton} disabled={this.state.formComplete}>create</button>\n//             </form>\n//         </div>\n//     );\n// }\n// }\n\n\n_s(CreateBoard, \"eGbZ7DHQozULDYSQrbrkeeJ/34A=\", false, function () {\n  return [useHistory];\n});\n\n_c = CreateBoard;\nexport default _c2 = withRouter(CreateBoard);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CreateBoard\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/kido3/Desktop/Kido/kido-book-trial/src/pages/Backend/CreateGroup/CreateGroup.js"],"names":["React","useState","useEffect","useContext","Axios","style","AuthContext","withRouter","useHistory","CreateBoard","props","currentUser","formComplete","setFormComplete","formIncompleteError","setFormIncompleteError","isBoardAdded","setIsBoardAdded","nameOfboards","setNameOfboards","teamMembers","setTeamMembers","NameOfboard","useRef","TeamMember","userId","uid","history","addBoardToDBHandler","event","preventDefault","current","value","length","post","boardName","members","then","response","alert","push","catch","error","console","log","CreateMain","color","CreateTitle","Createlable","target","CreateButton"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport Axios from 'axios';\nimport style from './CreateBoard.module.css';\nimport { AuthContext } from '../../../context/Auth';\nimport { withRouter, useHistory } from \"react-router-dom\";\n\nconst CreateBoard = (props) => {\n    const { currentUser } = useContext(AuthContext);\n\n    const [formComplete, setFormComplete] = useState(false);\n    const [formIncompleteError, setFormIncompleteError] = useState(false);\n    const [isBoardAdded, setIsBoardAdded] = useState(false);\n\n    const [nameOfboards, setNameOfboards] = useState(\"\");\n    const [teamMembers, setTeamMembers] = useState(\"\");\n    // const [typeOfBoards, setTypeOfBoards] = useState(\"\");\n\n\n    const NameOfboard  = React.useRef();\n    const TeamMember  = React.useRef();\n    // const TypeOfBoard  = React.useRef();\n\n    const userId = currentUser.uid;\n\n    // to use history function\n    const history = useHistory();\n\n    useEffect(() => {\n        setIsBoardAdded(false);\n      }, [isBoardAdded]);\n\n    \n    const addBoardToDBHandler = (event) => {\n        event.preventDefault();\n        if(NameOfboard.current.value.length === 0 || TeamMember.current.value.length === 0){\n        setFormComplete(false);\n        setFormIncompleteError(true);\n        } else {\n        // add column name in firebase\n        Axios.post(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents.json`, {\n            boardName: nameOfboards,\n            // boardType: typeOfBoards,\n            members: teamMembers,\n            \n            \n        })\n            .then((response) => {\n                alert(\"Group added succesfully\");\n                history.push(\"/backendhome\");\n                setIsBoardAdded(true);\n            })\n            .catch((error) => console.log(error));\n\n        }\n    };\n\n    return(\n        \n        <div className=\"wrapper d-flex align-items-stretch\">\n        <Sidebar />\n        <div className={style.CreateMain}>\n        {formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding the Group</p> : null}\n        <div className={style.CreateTitle}>\n        <span>Create a Board</span>\n        </div>\n      \n        <form onSubmit={addBoardToDBHandler}>\n        <label>\n            <div className={style.Createlable}>Enter a name of your board:</div>\n            <input id=\"name\" type=\"text\" name=\"name\" placeholder=\"eg Agile Sprint Board\" ref={NameOfboard}  onChange={(event) => setNameOfboards(event.target.value)}/>\n        </label>\n        <label>\n            <div className={style.Createlable}>Add your team members:</div>\n            <input id=\"team\" type=\"text\" name=\"team\" placeholder=\"Add your team (separated by commas)\" ref={TeamMember}  onChange={(event) => setTeamMembers(event.target.value)}/>\n        </label>\n        {/* <label>\n            <div className={style.Createlable}>Enter the type of your board:</div>\n            <input id=\"type\" type=\"text\" name=\"type\" placeholder=\"eg Design UX\" ref={TypeOfBoard}  onChange={(event) => setTypeOfBoards(event.target.value)}/>\n        </label> */}\n        <button type=\"submit\" id=\"CreateBoard\" className={style.CreateButton} disabled={formComplete}>create</button>\n        </form>\n    </div>\n    </div>\n\n    );\n\n}\n\n\n// class CreateBoard extends Component {\n//     constructor(props){\n//         super(props);\n//         this.NameOfboard = React.createRef();\n//         this.TeamMember = React.createRef();\n//         this.TypeOfBoard = React.createRef();\n\n//         this.currentUser = useContext(AuthContext);\n//         this.userId = currentUser.uid;\n//     }\n    \n//     state = {\n    \n//         formComplete : false,\n//         formIncompleteError : false,\n//         selectedBoard : {}\n//     }\n\n\n//     componentDidMount() {\n//         Axios.get(`https://pro-organiser-app.firebaseio.com/boardContents/${userId}.json`)\n//             .then(response => {\n//                 console.log(response);\n//                 this.setState({\n//                     boardContents: response.data\n//                 })\n//             })\n//             .catch(error => {console.log(error)});\n//     }\n\n//     addBoardToDBHandler = (event) => {\n//         event.preventDefault();\n//         if(this.NameOfboard.current.value.length === 0 || this.TeamMember.current.value.length === 0 || this.TypeOfBoard.current.value.length === 0){\n//             this.setState({\n//                 formComplete : false,\n//                 formIncompleteError : true\n//             })\n//         }else{\n//             let selectedBoard = {...this.state.selectedBoard}\n//             selectedBoard.boardName = this.NameOfboard.current.value;\n//             selectedBoard.members = this.TeamMember.current.value;\n//             selectedBoard.boardType = this.TypeOfBoard.current.value;\n            \n//             Axios.post('https://pro-organiser-app.firebaseio.com/boardContents.json', selectedBoard)\n//                 .then(response => {\n//                     alert(\"Board added succesfully\");\n//                                    this.props.history.push('/');\n                                \n//                         }).catch(error => {console.log(error)});\n//                     }\n//                 }\n\n//     render() {\n//     return (\n//         <div className={style.CreateMain}>\n//             {this.state.formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding the Board</p> : null}\n//             <div className={style.CreateTitle}>\n//             <span>Create a Board</span>\n//             </div>\n          \n//             <form onSubmit={this.addBoardToDBHandler}>\n//             <label>\n//                 <div className={style.Createlable}>Enter a name of your board:</div>\n//                 <input id=\"name\" type=\"text\" name=\"name\" placeholder=\"eg Agile Sprint Board\" ref={this.NameOfboard} />\n//             </label>\n//             <label>\n//                 <div className={style.Createlable}>Add your team members:</div>\n//                 <input id=\"team\" type=\"text\" name=\"team\" placeholder=\"Add your team (separated by commas)\" ref={this.TeamMember} />\n//             </label>\n//             <label>\n//                 <div className={style.Createlable}>Enter the type of your board:</div>\n//                 <input id=\"type\" type=\"text\" name=\"type\" placeholder=\"eg Design UX\" ref={this.TypeOfBoard} />\n//             </label>\n//             <button type=\"submit\" id=\"CreateBoard\" className={style.CreateButton} disabled={this.state.formComplete}>create</button>\n//             </form>\n//         </div>\n//     );\n// }\n// }\n\nexport default withRouter(CreateBoard);\n"]},"metadata":{},"sourceType":"module"}