{"ast":null,"code":"// import React, { useState, useEffect, useContext } from \"react\";\n// import style from  './Board.module.css';\n// import Axios from 'axios';\n// import { withRouter, useHistory } from \"react-router-dom\";\n// import Loader from \"../../common/loader/Loader\";\n// import AddColumn from \"../../components/addColumn/AddColumn\";\n// import Card from \"../../components/card/Card\";\n// import { AuthContext } from '../../context/Auth';\n// export const Board = (props) => {\n//     const { currentUser } = useContext(AuthContext);\n//     const name = props.match.params.boardName;\n//     const members = props.location.state.members;\n//     const [columnData, setColumnData] = useState({});\n//     const [showColumn, setShowColumn] = useState(false);\n//     const [loading, setLoading] = useState(true);\n//     const [isCardDragged, setIsCardDragged] = useState(false);\n//     const [isColumnDelete, setIsColumnDelete] = useState(false);\n//     const userId = currentUser.uid;\n//      // to use history function\n//     const history = useHistory();\n//     document.title = `${name} | Pro Organizer`;\n//     useEffect(() => {\n//         setShowColumn(false);\n//         setIsCardDragged(false);\n//         setIsColumnDelete(false);\n//         getColumnData();\n//     }, [showColumn, isColumnDelete, isCardDragged]);\n//     const getColumnData = () => {\n//         Axios\n//         .get(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents/${props.location.state.boardId}/column.json`)\n//         .then((response) => {\n//             setTimeout(setColumnData(response.data), 5000);\n//           setLoading(false);\n//         })\n//         .catch((error) => console.log(error));\n//     };\n//       // handle board delete\n//     const handleBoardDelete = (e) => {\n//       if (window.confirm(\"Are you sure you want to delete the board?\")) {\n//         Axios\n//         .delete(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents/${props.location.state.boardId}.json`)\n//           .then((response) => {\n//             alert(\"board deleted succesfully\");\n//             history.push(\"/\");\n//           })\n//           .catch((error) => console.log(\"Error\" + error));\n//       }\n//     };\n//       // handle column delete\n//     const handleColumnDelete = (columnId, e) => {\n//       if (window.confirm(\"Are you sure you want to delete the Column?\")) {\n//       Axios\n//       .delete(`https://pro-organiser-app.firebaseio.com/${userId}//boardContents/${props.location.state.boardId}/column/${columnId}.json`)\n//         .then((response) => {\n//           alert(\"column deleted succesfully\");\n//           setIsColumnDelete(true);\n//         })\n//         .catch((error) => console.log(\"Error\" + error));\n//       }\n//     };\n//       //  handle card drop\n//   const handleCardDrop = (droppedColumnId, e) => {\n//     e.preventDefault();\n//     var droppedCardData = JSON.parse(e.dataTransfer.getData(\"text/plain\"));\n//     console.log(droppedCardData);\n//     const prevColId = droppedCardData.columnId;\n//     const prevCardId = droppedCardData.dragCardId;\n//     const draggedCardData = droppedCardData.cardData;\n//     if (draggedCardData !== null) {\n//       //   // Delete from previous column\n//       Axios\n//       .delete(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents/${props.location.state.boardId}/column/${prevColId}/card/${prevCardId}.json`)\n//         .then((response) => {\n//           console.log(\"card removed\");\n//         })\n//         .catch((error) => console.log(\"Error\" + error));\n//       // Add card to new column\n//       Axios\n//       .post(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents/${props.location.state.boardId}/column/${droppedColumnId}/card.json`,\n//         {\n//           cardTitle: draggedCardData.cardTitle,\n//           team: draggedCardData.team,\n//           descrptn: draggedCardData.descrptn,\n//           dueDate: draggedCardData.dueDate,\n//         }\n//       )\n//         .then((res) => {\n//           console.log(\"card added in new column\");\n//           // call new card\n//         })\n//         .catch((err) => console.log(\"Error\" + err));\n//       setIsCardDragged(true);\n//     }\n//   };\n//     return (\n//         <div>\n//           <br />\n//           {loading ? (\n//             <Loader></Loader>\n//           ) : (\n//               <div className={style.ColumnContainer}>\n//                   <div className={style.ColumnHeader}>\n//                     <div className={style.ColumnTitle}>\n//                         <span>{name}</span>\n//                     </div>\n//                     <div className={style.DeleteBoardBtn}>\n//                         <button className={style.DeleteBtn} onClick={handleBoardDelete}>Delete Board</button>\n//                     </div>\n//                 </div>\n//                 <br />\n//                   <div className={style.ColumnDatas}>\n//                   {columnData &&\n//                   Object.entries(columnData).map((item) => (\n//                           <div className={style.ColumnCard} key={item[0]}>\n//                             <div className={style.ColumnCardHead}>\n//                               <span className={style.ColumnNames}>\n//                                 {item[1].name}\n//                               </span>\n//                               <div className={style.deleteColumn}>\n//                               <i\n//                                 className=\"fas fa-trash-alt\"\n//                                 onClick={(e) => handleColumnDelete(item[0], e)}\n//                               ></i>\n//                             </div>\n//                           </div>\n//                           <div\n//                               className={style.cardContainer}\n//                               onDrop={(e) => handleCardDrop(item[0], e)}\n//                               onDragOver={(e) => {\n//                                 e.preventDefault();\n//                               }}\n//                             >\n//                             <Card\n//                               members={members}\n//                               columnId={item[0]}\n//                               boardId={props.location.state.boardId}\n//                               boardTitle={name}\n//                               isCardDragged={isCardDragged}\n//                             ></Card>\n//                           </div>\n//                           </div>\n//                       ))}\n//                         <AddColumn\n//                         pathname={props.location.pathname}\n//                         boardId={props.location.state.boardId}\n//                         getColumnData={getColumnData}\n//                         setShowColumn={setShowColumn}\n//                       ></AddColumn>\n//                   </div>\n//               </div>\n//           )}\n//         </div>\n//       );\n//     }\n// export default withRouter(Board);","map":{"version":3,"sources":["/home/kido3/Desktop/Kido/kido-book-trial/src/pages/Backend/Board/Board.js"],"names":[],"mappingssourcesContent":["// import React, { useState, useEffect, useContext } from \"react\";\n// import style from  './Board.module.css';\n// import Axios from 'axios';\n// import { withRouter, useHistory } from \"react-router-dom\";\n// import Loader from \"../../common/loader/Loader\";\n// import AddColumn from \"../../components/addColumn/AddColumn\";\n// import Card from \"../../components/card/Card\";\n// import { AuthContext } from '../../context/Auth';\n\n// export const Board = (props) => {\n//     const { currentUser } = useContext(AuthContext);\n\n//     const name = props.match.params.boardName;\n//     const members = props.location.state.members;\n\n//     const [columnData, setColumnData] = useState({});\n//     const [showColumn, setShowColumn] = useState(false);\n//     const [loading, setLoading] = useState(true);\n//     const [isCardDragged, setIsCardDragged] = useState(false);\n//     const [isColumnDelete, setIsColumnDelete] = useState(false);\n\n//     const userId = currentUser.uid;\n\n//      // to use history function\n//     const history = useHistory();\n\n//     document.title = `${name} | Pro Organizer`;\n\n//     useEffect(() => {\n//         setShowColumn(false);\n//         setIsCardDragged(false);\n//         setIsColumnDelete(false);\n//         getColumnData();\n//     }, [showColumn, isColumnDelete, isCardDragged]);\n  \n//     const getColumnData = () => {\n//         Axios\n//         .get(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents/${props.location.state.boardId}/column.json`)\n//         .then((response) => {\n//             setTimeout(setColumnData(response.data), 5000);\n//           setLoading(false);\n//         })\n//         .catch((error) => console.log(error));\n//     };\n\n//       // handle board delete\n//     const handleBoardDelete = (e) => {\n//       if (window.confirm(\"Are you sure you want to delete the board?\")) {\n//         Axios\n//         .delete(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents/${props.location.state.boardId}.json`)\n//           .then((response) => {\n//             alert(\"board deleted succesfully\");\n//             history.push(\"/\");\n//           })\n//           .catch((error) => console.log(\"Error\" + error));\n//       }\n//     };\n\n//       // handle column delete\n//     const handleColumnDelete = (columnId, e) => {\n//       if (window.confirm(\"Are you sure you want to delete the Column?\")) {\n//       Axios\n//       .delete(`https://pro-organiser-app.firebaseio.com/${userId}//boardContents/${props.location.state.boardId}/column/${columnId}.json`)\n//         .then((response) => {\n//           alert(\"column deleted succesfully\");\n//           setIsColumnDelete(true);\n//         })\n//         .catch((error) => console.log(\"Error\" + error));\n//       }\n//     };\n\n//       //  handle card drop\n//   const handleCardDrop = (droppedColumnId, e) => {\n//     e.preventDefault();\n//     var droppedCardData = JSON.parse(e.dataTransfer.getData(\"text/plain\"));\n//     console.log(droppedCardData);\n\n//     const prevColId = droppedCardData.columnId;\n//     const prevCardId = droppedCardData.dragCardId;\n//     const draggedCardData = droppedCardData.cardData;\n\n//     if (draggedCardData !== null) {\n//       //   // Delete from previous column\n//       Axios\n//       .delete(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents/${props.location.state.boardId}/column/${prevColId}/card/${prevCardId}.json`)\n//         .then((response) => {\n//           console.log(\"card removed\");\n//         })\n//         .catch((error) => console.log(\"Error\" + error));\n\n//       // Add card to new column\n//       Axios\n//       .post(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents/${props.location.state.boardId}/column/${droppedColumnId}/card.json`,\n//         {\n//           cardTitle: draggedCardData.cardTitle,\n//           team: draggedCardData.team,\n//           descrptn: draggedCardData.descrptn,\n//           dueDate: draggedCardData.dueDate,\n//         }\n//       )\n//         .then((res) => {\n//           console.log(\"card added in new column\");\n//           // call new card\n//         })\n//         .catch((err) => console.log(\"Error\" + err));\n//       setIsCardDragged(true);\n//     }\n//   };\n\n//     return (\n//         <div>\n//           <br />\n//           {loading ? (\n//             <Loader></Loader>\n//           ) : (\n//               <div className={style.ColumnContainer}>\n//                   <div className={style.ColumnHeader}>\n//                     <div className={style.ColumnTitle}>\n//                         <span>{name}</span>\n//                     </div>\n//                     <div className={style.DeleteBoardBtn}>\n//                         <button className={style.DeleteBtn} onClick={handleBoardDelete}>Delete Board</button>\n//                     </div>\n//                 </div>\n//                 <br />\n//                   <div className={style.ColumnDatas}>\n//                   {columnData &&\n//                   Object.entries(columnData).map((item) => (\n                 \n//                           <div className={style.ColumnCard} key={item[0]}>\n//                             <div className={style.ColumnCardHead}>\n//                               <span className={style.ColumnNames}>\n//                                 {item[1].name}\n//                               </span>\n//                               <div className={style.deleteColumn}>\n//                               <i\n//                                 className=\"fas fa-trash-alt\"\n//                                 onClick={(e) => handleColumnDelete(item[0], e)}\n//                               ></i>\n//                             </div>\n//                           </div>\n//                           <div\n//                               className={style.cardContainer}\n//                               onDrop={(e) => handleCardDrop(item[0], e)}\n//                               onDragOver={(e) => {\n//                                 e.preventDefault();\n//                               }}\n//                             >\n//                             <Card\n//                               members={members}\n//                               columnId={item[0]}\n//                               boardId={props.location.state.boardId}\n//                               boardTitle={name}\n//                               isCardDragged={isCardDragged}\n//                             ></Card>\n//                           </div>\n//                           </div>\n                     \n//                       ))}\n//                         <AddColumn\n//                         pathname={props.location.pathname}\n//                         boardId={props.location.state.boardId}\n//                         getColumnData={getColumnData}\n//                         setShowColumn={setShowColumn}\n//                       ></AddColumn>\n//                   </div>\n//               </div>\n//           )}\n//         </div>\n//       );\n//     }\n    \n\n// export default withRouter(Board);\n"]},"metadata":{},"sourceType":"module"}