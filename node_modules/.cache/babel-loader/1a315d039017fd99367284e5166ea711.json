{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/kido3/Desktop/Kido/kido-book-trial/src/pages/Backend/CreateGroup/CreateGroup.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport Axios from 'axios'; // import style from './CreateBoard.module.css';\n\nimport { AuthContext } from '../../../context/Auth';\nimport { withRouter, useHistory } from \"react-router-dom\";\nimport Sidebar from \"../../../components/Backend/Sidebar/Sidebar\";\n\nconst CreateBoard = props => {\n  _s();\n\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const [formComplete, setFormComplete] = useState(false);\n  const [formIncompleteError, setFormIncompleteError] = useState(false);\n  const [isBoardAdded, setIsBoardAdded] = useState(false);\n  const [nameOfboards, setNameOfboards] = useState(\"\");\n  const [teamMembers, setTeamMembers] = useState(\"\"); // const [typeOfBoards, setTypeOfBoards] = useState(\"\");\n\n  const NameOfboard = React.useRef();\n  const TeamMember = React.useRef(); // const TypeOfBoard  = React.useRef();\n\n  const userId = currentUser.uid; // to use history function\n\n  const history = useHistory();\n  useEffect(() => {\n    setIsBoardAdded(false);\n  }, [isBoardAdded]);\n\n  const addBoardToDBHandler = event => {\n    event.preventDefault();\n\n    if (NameOfboard.current.value.length === 0 || TeamMember.current.value.length === 0) {\n      setFormComplete(false);\n      setFormIncompleteError(true);\n    } else {\n      // add column name in firebase\n      Axios.post(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents.json`, {\n        boardName: nameOfboards,\n        // boardType: typeOfBoards,\n        members: teamMembers\n      }).then(response => {\n        alert(\"Group added succesfully\");\n        history.push(\"/backendhome\");\n        setIsBoardAdded(true);\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper d-flex align-items-stretch\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container py-5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-10 col-lg-10\",\n          children: [formIncompleteError ? /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"alert alert-danger\",\n            role: \"alert\",\n            children: \"Kindly complete the form before adding the Group\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 40\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"create-group border bg-white p-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"text-primary1\",\n              children: \"Create a Board\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: addBoardToDBHandler,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  for: \"agegroup\",\n                  children: \"Enter Child Age Group:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"agegroup\",\n                  type: \"text\",\n                  class: \"form-control\",\n                  name: \"agegroup\",\n                  placeholder: \"eg 2Years-3Years\",\n                  ref: NameOfboard,\n                  onChange: event => setNameOfboards(event.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  for: \"teachername\",\n                  children: \"Enter Teacher Names:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"teachername\",\n                  type: \"text\",\n                  class: \"form-control\",\n                  name: \"teachername\",\n                  placeholder: \"Add teacher names (separated by commas)\",\n                  ref: TeamMember,\n                  onChange: event => setTeamMembers(event.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                class: \"btn btn-sm btn-primary\",\n                disabled: formComplete,\n                children: \"Create\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}; // class CreateBoard extends Component {\n//     constructor(props){\n//         super(props);\n//         this.NameOfboard = React.createRef();\n//         this.TeamMember = React.createRef();\n//         this.TypeOfBoard = React.createRef();\n//         this.currentUser = useContext(AuthContext);\n//         this.userId = currentUser.uid;\n//     }\n//     state = {\n//         formComplete : false,\n//         formIncompleteError : false,\n//         selectedBoard : {}\n//     }\n//     componentDidMount() {\n//         Axios.get(`https://pro-organiser-app.firebaseio.com/boardContents/${userId}.json`)\n//             .then(response => {\n//                 console.log(response);\n//                 this.setState({\n//                     boardContents: response.data\n//                 })\n//             })\n//             .catch(error => {console.log(error)});\n//     }\n//     addBoardToDBHandler = (event) => {\n//         event.preventDefault();\n//         if(this.NameOfboard.current.value.length === 0 || this.TeamMember.current.value.length === 0 || this.TypeOfBoard.current.value.length === 0){\n//             this.setState({\n//                 formComplete : false,\n//                 formIncompleteError : true\n//             })\n//         }else{\n//             let selectedBoard = {...this.state.selectedBoard}\n//             selectedBoard.boardName = this.NameOfboard.current.value;\n//             selectedBoard.members = this.TeamMember.current.value;\n//             selectedBoard.boardType = this.TypeOfBoard.current.value;\n//             Axios.post('https://pro-organiser-app.firebaseio.com/boardContents.json', selectedBoard)\n//                 .then(response => {\n//                     alert(\"Board added succesfully\");\n//                                    this.props.history.push('/');\n//                         }).catch(error => {console.log(error)});\n//                     }\n//                 }\n//     render() {\n//     return (\n//         <div className={style.CreateMain}>\n//             {this.state.formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding the Board</p> : null}\n//             <div className={style.CreateTitle}>\n//             <span>Create a Board</span>\n//             </div>\n//             <form onSubmit={this.addBoardToDBHandler}>\n//             <label>\n//                 <div className={style.Createlable}>Enter a name of your board:</div>\n//                 <input id=\"name\" type=\"text\" name=\"name\" placeholder=\"eg Agile Sprint Board\" ref={this.NameOfboard} />\n//             </label>\n//             <label>\n//                 <div className={style.Createlable}>Add your team members:</div>\n//                 <input id=\"team\" type=\"text\" name=\"team\" placeholder=\"Add your team (separated by commas)\" ref={this.TeamMember} />\n//             </label>\n//             <label>\n//                 <div className={style.Createlable}>Enter the type of your board:</div>\n//                 <input id=\"type\" type=\"text\" name=\"type\" placeholder=\"eg Design UX\" ref={this.TypeOfBoard} />\n//             </label>\n//             <button type=\"submit\" id=\"CreateBoard\" className={style.CreateButton} disabled={this.state.formComplete}>create</button>\n//             </form>\n//         </div>\n//     );\n// }\n// }\n\n\n_s(CreateBoard, \"eGbZ7DHQozULDYSQrbrkeeJ/34A=\", false, function () {\n  return [useHistory];\n});\n\n_c = CreateBoard;\nexport default _c2 = withRouter(CreateBoard);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CreateBoard\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/kido3/Desktop/Kido/kido-book-trial/src/pages/Backend/CreateGroup/CreateGroup.js"],"names":["React","useState","useEffect","useContext","Axios","AuthContext","withRouter","useHistory","Sidebar","CreateBoard","props","currentUser","formComplete","setFormComplete","formIncompleteError","setFormIncompleteError","isBoardAdded","setIsBoardAdded","nameOfboards","setNameOfboards","teamMembers","setTeamMembers","NameOfboard","useRef","TeamMember","userId","uid","history","addBoardToDBHandler","event","preventDefault","current","value","length","post","boardName","members","then","response","alert","push","catch","error","console","log","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport Axios from 'axios';\n// import style from './CreateBoard.module.css';\nimport { AuthContext } from '../../../context/Auth';\nimport { withRouter, useHistory } from \"react-router-dom\";\nimport Sidebar from \"../../../components/Backend/Sidebar/Sidebar\";\n\nconst CreateBoard = (props) => {\n    const { currentUser } = useContext(AuthContext);\n\n    const [formComplete, setFormComplete] = useState(false);\n    const [formIncompleteError, setFormIncompleteError] = useState(false);\n    const [isBoardAdded, setIsBoardAdded] = useState(false);\n\n    const [nameOfboards, setNameOfboards] = useState(\"\");\n    const [teamMembers, setTeamMembers] = useState(\"\");\n    // const [typeOfBoards, setTypeOfBoards] = useState(\"\");\n\n\n    const NameOfboard  = React.useRef();\n    const TeamMember  = React.useRef();\n    // const TypeOfBoard  = React.useRef();\n\n    const userId = currentUser.uid;\n\n    // to use history function\n    const history = useHistory();\n\n    useEffect(() => {\n        setIsBoardAdded(false);\n      }, [isBoardAdded]);\n\n    \n    const addBoardToDBHandler = (event) => {\n        event.preventDefault();\n        if(NameOfboard.current.value.length === 0 || TeamMember.current.value.length === 0){\n        setFormComplete(false);\n        setFormIncompleteError(true);\n        } else {\n        // add column name in firebase\n        Axios.post(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents.json`, {\n            boardName: nameOfboards,\n            // boardType: typeOfBoards,\n            members: teamMembers,\n            \n            \n        })\n            .then((response) => {\n                alert(\"Group added succesfully\");\n                history.push(\"/backendhome\");\n                setIsBoardAdded(true);\n            })\n            .catch((error) => console.log(error));\n\n        }\n    };\n\n    return(\n        \n        <div className=\"wrapper d-flex align-items-stretch\">\n        <Sidebar />\n\n        <div className=\"container py-5\">\n            <div className=\"row justify-content-center\">\n                <div className=\"col-md-10 col-lg-10\">\n                {formIncompleteError ? <div class=\"alert alert-danger\" role=\"alert\">Kindly complete the form before adding the Group</div> : null}\n                <div className=\"create-group border bg-white p-4\">\n                <h1 className=\"text-primary1\">Create a Board</h1>\n                <form onSubmit={addBoardToDBHandler}>\n                    <div class=\"form-group\">\n                        <label for=\"agegroup\">Enter Child Age Group:</label>\n                        <input id=\"agegroup\" type=\"text\" class=\"form-control\" name=\"agegroup\" placeholder=\"eg 2Years-3Years\"\n                        ref={NameOfboard}  onChange={(event) => setNameOfboards(event.target.value)}/>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"teachername\">Enter Teacher Names:</label>\n                        <input id=\"teachername\" type=\"text\" class=\"form-control\" name=\"teachername\" placeholder=\"Add teacher names (separated by commas)\"\n                        ref={TeamMember}  onChange={(event) => setTeamMembers(event.target.value)}/>\n                    </div>\n                    <button type=\"submit\" class=\"btn btn-sm btn-primary\" disabled={formComplete}>Create</button>\n                    </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n\n        {/* <div className={style.CreateMain}>\n        {formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding the Group</p> : null}\n        <div className={style.CreateTitle}>\n        <span>Create a Board</span>\n        </div>\n      \n        <form onSubmit={addBoardToDBHandler}>\n        <label>\n            <div className={style.Createlable}>Enter a name of your board:</div>\n            <input id=\"name\" type=\"text\" name=\"name\" placeholder=\"eg Agile Sprint Board\" ref={NameOfboard}  onChange={(event) => setNameOfboards(event.target.value)}/>\n        </label>\n        <label>\n            <div className={style.Createlable}>Add your team members:</div>\n            <input id=\"team\" type=\"text\" name=\"team\" placeholder=\"Add your team (separated by commas)\" ref={TeamMember}  onChange={(event) => setTeamMembers(event.target.value)}/>\n        </label>\n        <label>\n            <div className={style.Createlable}>Enter the type of your board:</div>\n            <input id=\"type\" type=\"text\" name=\"type\" placeholder=\"eg Design UX\" ref={TypeOfBoard}  onChange={(event) => setTypeOfBoards(event.target.value)}/>\n        </label>\n        <button type=\"submit\" id=\"CreateBoard\" className={style.CreateButton} disabled={formComplete}>create</button>\n        </form>\n    </div> */}\n    </div>\n\n    );\n\n}\n\n\n// class CreateBoard extends Component {\n//     constructor(props){\n//         super(props);\n//         this.NameOfboard = React.createRef();\n//         this.TeamMember = React.createRef();\n//         this.TypeOfBoard = React.createRef();\n\n//         this.currentUser = useContext(AuthContext);\n//         this.userId = currentUser.uid;\n//     }\n    \n//     state = {\n    \n//         formComplete : false,\n//         formIncompleteError : false,\n//         selectedBoard : {}\n//     }\n\n\n//     componentDidMount() {\n//         Axios.get(`https://pro-organiser-app.firebaseio.com/boardContents/${userId}.json`)\n//             .then(response => {\n//                 console.log(response);\n//                 this.setState({\n//                     boardContents: response.data\n//                 })\n//             })\n//             .catch(error => {console.log(error)});\n//     }\n\n//     addBoardToDBHandler = (event) => {\n//         event.preventDefault();\n//         if(this.NameOfboard.current.value.length === 0 || this.TeamMember.current.value.length === 0 || this.TypeOfBoard.current.value.length === 0){\n//             this.setState({\n//                 formComplete : false,\n//                 formIncompleteError : true\n//             })\n//         }else{\n//             let selectedBoard = {...this.state.selectedBoard}\n//             selectedBoard.boardName = this.NameOfboard.current.value;\n//             selectedBoard.members = this.TeamMember.current.value;\n//             selectedBoard.boardType = this.TypeOfBoard.current.value;\n            \n//             Axios.post('https://pro-organiser-app.firebaseio.com/boardContents.json', selectedBoard)\n//                 .then(response => {\n//                     alert(\"Board added succesfully\");\n//                                    this.props.history.push('/');\n                                \n//                         }).catch(error => {console.log(error)});\n//                     }\n//                 }\n\n//     render() {\n//     return (\n//         <div className={style.CreateMain}>\n//             {this.state.formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding the Board</p> : null}\n//             <div className={style.CreateTitle}>\n//             <span>Create a Board</span>\n//             </div>\n          \n//             <form onSubmit={this.addBoardToDBHandler}>\n//             <label>\n//                 <div className={style.Createlable}>Enter a name of your board:</div>\n//                 <input id=\"name\" type=\"text\" name=\"name\" placeholder=\"eg Agile Sprint Board\" ref={this.NameOfboard} />\n//             </label>\n//             <label>\n//                 <div className={style.Createlable}>Add your team members:</div>\n//                 <input id=\"team\" type=\"text\" name=\"team\" placeholder=\"Add your team (separated by commas)\" ref={this.TeamMember} />\n//             </label>\n//             <label>\n//                 <div className={style.Createlable}>Enter the type of your board:</div>\n//                 <input id=\"type\" type=\"text\" name=\"type\" placeholder=\"eg Design UX\" ref={this.TypeOfBoard} />\n//             </label>\n//             <button type=\"submit\" id=\"CreateBoard\" className={style.CreateButton} disabled={this.state.formComplete}>create</button>\n//             </form>\n//         </div>\n//     );\n// }\n// }\n\nexport default withRouter(CreateBoard);\n"]},"metadata":{},"sourceType":"module"}