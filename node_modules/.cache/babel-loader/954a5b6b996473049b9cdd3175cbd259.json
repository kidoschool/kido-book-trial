{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/kido3/Desktop/Kido/kido-book-trial/src/components/Backend/addColumn/AddColumn.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport style from \"./AddColumn.module.css\";\nimport Modal from './../../../common/Modal/Modal';\nimport Axios from \"axios\";\nimport { AuthContext } from '../../../context/Auth';\n\nfunction AddColumn(props) {\n  _s();\n\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const [showModal, setShowModal] = useState(false);\n  const [columnName, setColumnName] = useState(\"\");\n  const [formComplete, setFormComplete] = useState(false);\n  const [formIncompleteError, setFormIncompleteError] = useState(false);\n  const columnNames = React.useRef();\n  const userId = currentUser.uid;\n  useEffect(() => {\n    modalOpenHandler();\n  }, [showModal]);\n\n  const handleAddColumnClick = event => {\n    if (columnNames.current.value.length === 0) {\n      setFormComplete(false);\n      setFormIncompleteError(true);\n    } else {\n      // add column name in firebase\n      Axios.post(`https://pro-organiser-app.firebaseio.com/boardContents/${props.groupId}/column.json`, {\n        name: columnName\n      }).then(response => {\n        alert(\"column added succesfully\");\n        props.setShowColumn(true);\n      }).catch(error => console.log(error));\n      setShowModal(false);\n    }\n  };\n\n  const modalOpenHandler = () => {\n    let colBox = document.getElementById(\"addColumnBox\");\n    colBox.addEventListener(\"click\", () => {\n      setShowModal(true);\n    });\n  };\n\n  const modalCloseHandler = () => {\n    setShowModal(false);\n  };\n\n  let modalContent = showModal ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [formIncompleteError ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: \"Kindly complete the form before adding Column\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 30\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.AddColumnForm,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add column\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.FormInput,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: style.Lable,\n          children: \"Enter a column name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"column_name\",\n          value: columnName,\n          placeholder: \"Enter a column name\",\n          ref: columnNames,\n          onChange: event => setColumnName(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 98\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: style.AddButton,\n      id: \"CreateColumn\",\n      disabled: formComplete,\n      onClick: handleAddColumnClick,\n      children: \"Add Column\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true) : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.addColumnBox,\n      id: \"addColumnBox\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Add a column\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n      content: modalContent,\n      close: modalCloseHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddColumn, \"v6C5EcdwQ+SY/2XDe1cvzhHtc3o=\");\n\n_c = AddColumn;\nexport default AddColumn;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddColumn\");","map":{"version":3,"sources":["/home/kido3/Desktop/Kido/kido-book-trial/src/components/Backend/addColumn/AddColumn.js"],"names":["React","useState","useEffect","useContext","style","Modal","Axios","AuthContext","AddColumn","props","currentUser","showModal","setShowModal","columnName","setColumnName","formComplete","setFormComplete","formIncompleteError","setFormIncompleteError","columnNames","useRef","userId","uid","modalOpenHandler","handleAddColumnClick","event","current","value","length","post","groupId","name","then","response","alert","setShowColumn","catch","error","console","log","colBox","document","getElementById","addEventListener","modalCloseHandler","modalContent","color","AddColumnForm","FormInput","Lable","target","AddButton","addColumnBox"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport style from \"./AddColumn.module.css\";\nimport Modal from './../../../common/Modal/Modal';\nimport Axios from \"axios\";\nimport { AuthContext } from '../../../context/Auth';\n\nfunction AddColumn(props) {\n  const { currentUser } = useContext(AuthContext);\n  \n  const [showModal, setShowModal] = useState(false);\n  const [columnName, setColumnName] = useState(\"\");\n  const [formComplete, setFormComplete] = useState(false);\n  const [formIncompleteError, setFormIncompleteError] = useState(false);\n\n  const columnNames  = React.useRef();\n\n  const userId = currentUser.uid;\n\n  useEffect(() => {\n    modalOpenHandler();\n  }, [showModal]);\n\n  const handleAddColumnClick = (event) => {\n        if(columnNames.current.value.length === 0){\n          setFormComplete(false);\n          setFormIncompleteError(true);\n    } else {\n      // add column name in firebase\n      Axios.post(`https://pro-organiser-app.firebaseio.com/boardContents/${props.groupId}/column.json`, {\n        name: columnName,\n      })\n        .then((response) => {\n          alert(\"column added succesfully\");\n          props.setShowColumn(true);\n        })\n        .catch((error) => console.log(error));\n\n      setShowModal(false);\n    }\n  };\n\n  const modalOpenHandler = () => {\n    let colBox = document.getElementById(\"addColumnBox\");\n    colBox.addEventListener(\"click\", () => {\n      setShowModal(true);\n    });\n  };\n\n  const  modalCloseHandler = () => {setShowModal(false)};\n\n  let modalContent = showModal ? \n\n  (\n      <>\n      {formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding Column</p> : null}\n      <div className={style.AddColumnForm}>\n        <h2>Add column</h2>\n       <div className={style.FormInput}><span className={style.Lable}>Enter a column name:</span><input type=\"text\" id=\"column_name\" value={columnName} placeholder=\"Enter a column name\" ref={columnNames} onChange={(event) => setColumnName(event.target.value)}/></div>\n      </div>\n      <button className={style.AddButton} id=\"CreateColumn\" disabled={formComplete} onClick={handleAddColumnClick}>Add Column</button>\n      </>\n  )\n  :null;\n\n  return (\n    <div>\n       <div className={style.addColumnBox} id=\"addColumnBox\">\n        <div>Add a column</div>\n      </div>\n        <br />\n        {showModal && (\n        \n            <Modal  \n                content = {modalContent}\n                close = {modalCloseHandler}/> \n        )}\n       \n    </div>\n)\n}\n\nexport default AddColumn;\n"]},"metadata":{},"sourceType":"module"}