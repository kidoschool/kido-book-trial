{"ast":null,"code":"// import React, { useState, useEffect, useContext } from \"react\";\n// import style from \"./Card.module.css\";\n// import Modal from './../../../common/Modal/Modal';\n// import Axios from \"axios\";\n// import { AuthContext } from '../../../context/Auth';\n// function Card(props) {\n//   const { currentUser } = useContext(AuthContext);\n//   const [showModal, setShowModal] = useState(false);\n//   const { teacherName, scheduleDateId, groupId, childAgeGroup} = props;\n//   const [cardData, setCardData] = useState(\"\");\n//   // to handle details of card\n//   const [showDetails, setShowDetails] = useState(false);\n//   const [cardName, setCardName] = useState(\"\");\n//   const [descDetails, setDescDetails] = useState(\"\");\n//   const [dateDetails, setDateDetails] = useState(\"\");\n//   const [teamDetail, setTeamDetails] = useState([]);\n//   const [editDetails, setEditDetails] = useState(false);\n//   const [cardId, setCardId] = useState(\"\");\n//   const [isCardAdded, setIsCardAdded] = useState(false);\n//   const [isCardDelete, setIsCardDelete] = useState(false);\n//   const [isCardEdited, setIsCardEdited] = useState(false);\n//   const [cardTitle, setCardTitle] = useState(\"\");\n//   const [team, setTeam] = useState([]);\n//   const [descrptn, setDescrptn] = useState(\"\");\n//   const [dueDate, setDueDate] = useState(\"\");\n//   const [formComplete, setFormComplete] = useState(false);\n//   const [formIncompleteError, setFormIncompleteError] = useState(false);\n//   // to split members list string into array\n//   const memberArr = teacherName.split(\",\");\n//   const cardNames = React.useRef();\n//   const teamDetails = React.useRef();\n//   const descrpDetails = React.useRef();\n//   const datesDetails = React.useRef();\n//   const userId = currentUser.uid;\n//     // to Hide past date\n//     var today = new Date();\n//     var month,\n//       day = null;\n//     if (today.getMonth() < 10 || today.getDate() < 10) {\n//       month = \"0\" + (today.getMonth() + 1);\n//       day = \"0\" + today.getDate();\n//     }\n//     var date = today.getFullYear() + \"-\" + month + \"-\" + day;\n//     useEffect(() => {\n//       setIsCardAdded(false);\n//       setIsCardDelete(false);\n//       setIsCardEdited(false);\n//       getCardData();\n//     }, [isCardAdded, isCardDragged, isCardDelete, isCardEdited]);\n//   const getCardData = () => {\n//     Axios\n//     .get(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents/${boardId}/column/${columnId}/card.json`)\n//     .then((response) => {\n//         setCardData(response.data);\n//     })\n//     .catch((error) => console.log(error));\n// };\n//   //  to Add and Edit cardData in DB\n//   const handleAddCardData = (e) => {\n//     //   check if all input is taken\n//     if(cardNames.current.value.length === 0 || teamDetails.current.value.length === 0 || descrpDetails.current.value.length === 0 || datesDetails.current.value.length === 0){\n//       setFormComplete(false);\n//       setFormIncompleteError(true);\n//     } else {\n//       // if user wants to edit then put request is used\n//       if (editDetails) {\n//         Axios\n//         .put(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents/${boardId}/column/${columnId}/card/${cardId}.json`,\n//           {\n//             cardTitle: cardTitle === \"\" ? cardName : cardTitle,\n//             team: team.length === 0 ? teamDetail : team,\n//             descrptn: descrptn === \"\" ? descDetails : descrptn,\n//             dueDate: dueDate === \"\" ? dateDetails : dueDate,\n//           }\n//         )\n//           .then((response) => {\n//             alert(\"card edited succesfully\");\n//             setIsCardEdited(true);\n//           })\n//           .catch((error) => console.log(\"Error in editDetails\" + error));\n//       }\n//       //  if user wants to add a new card\n//       else {\n//         Axios\n//         .post(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents/${boardId}/column/${columnId}/card.json`,\n//           {\n//             cardTitle: cardTitle,\n//             team: team,\n//             descrptn: descrptn,\n//             dueDate: dueDate,\n//           }\n//         )\n//           .then((response) => {\n//             alert(\"card added succesfully\");\n//             setIsCardAdded(true);\n//           })\n//           .catch((error) => console.log(\"Error\" + error));\n//       }\n//       setShowModal(false);\n//       setEditDetails(false);\n//       setCardTitle(\"\");\n//       setTeam([]);\n//       setDescrptn(\"\");\n//       setDueDate(\"\");\n//     }\n//   };\n//   // on click of card this function shows details\n//   const onCardClick = (\n//     cardName,\n//     descDetails,\n//     dateDetails,\n//     teamDetails,\n//     cardId,\n//     e\n//   ) => {\n//     setShowDetails(true);\n//     setCardName(cardName);\n//     setDescDetails(descDetails);\n//     setDateDetails(dateDetails);\n//     setTeamDetails(teamDetails);\n//     setCardId(cardId);\n//   };\n//    // handles edit button click\n//    const handleEdit = (e) => {\n//     setShowDetails(false);\n//     setShowModal(true);\n//     setEditDetails(true);\n//   };\n//   // handles archive on card archive click\n//   const handleArchive = (e) => {\n//     Axios\n//     .delete(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents/${boardId}/column/${columnId}/card/${cardId}.json`)\n//       .then((response) => {\n//         alert(\"card archived succesfully\");\n//         setIsCardDelete(true);\n//       })\n//       .catch((error) => console.log(\"Error\" + error));\n//     setShowDetails(false);\n//   };\n// //To display multiple team member selected\n//   const onSelectChange = (e) => {\n//     const values = [...e.target.selectedOptions].map((opt) => opt.value);\n//     setTeam(values);\n//   };\n//   //to drag card\n//   const drag = (itemData, dragCardId, e) => {\n//     var draggedCard = {\n//       columnId: columnId,\n//       dragCardId: dragCardId,\n//       cardData: itemData,\n//     };\n//     e.dataTransfer.setData(\"text/plain\", JSON.stringify(draggedCard));\n//     console.log(e.dataTransfer.getData(\"text/plain\"));\n//   };\n//   //to drop card\n//   const allowDrop = (e) => {\n//     e.preventDefault();\n//   };\n//   const  modalCloseHandler = () => { setShowModal(false);setEditDetails(false);};\n//   const  showmodalCloseHandler = () => {setShowDetails(false)};\n//   //modal of Add and Edit Card\n//   let modalContent = showModal ? \n//   (\n//       <>\n//       {formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding Card</p> : null}\n//       <div className={style.AddCardForm}>\n//         <h2>{editDetails ? 'Edit Card' : 'Add Card'}</h2>\n//        <div className={style.FormInput}><span className={style.Lable}>Enter a title for your task:</span><br></br><input type=\"text\" id=\"title\" defaultValue={editDetails ? cardName : \"\"} placeholder=\"e.g. Add a new icon\" ref={cardNames} onChange={(e) => setCardTitle(e.target.value)}/></div>\n//        <div className={style.FormInput}><span className={style.Lable}>Choose members for this task(select multiple,if needed):</span><select  id=\"membersList\" name=\"membersList\" defaultValue={editDetails ? teamDetail : \"\"} multiple ref={teamDetails} onChange={onSelectChange}>{memberArr.map((item) => (<option value={item} key={item}>{item}</option>))}</select></div>\n//        <div className={style.FormInput}><span className={style.Lable}>Add the description for your task:</span><input id=\"description\" type=\"text\"  defaultValue={editDetails ? descDetails : \"\"} placeholder=\"Add your description here\" ref={descrpDetails}  onChange={(e) => setDescrptn(e.target.value)}/></div>\n//        <div className={style.FormInput}><span className={style.Lable}>Select the due-date for this task:</span><input id=\"due_date\" type=\"date\" min={date} defaultValue={editDetails ? dateDetails : \"\"} ref={datesDetails} onChange={(e) => setDueDate(e.target.value)}/></div>\n//       </div>\n//       <button className={style.AddButton} id=\"CreateCard\" disabled={formComplete} onClick={handleAddCardData}>{editDetails ? 'Edit Card' : 'Add Card'}</button>\n//       </>\n//   )\n//   :null;\n//   //modal of show card details\n//   let showmodalContent = showDetails ? \n//   (\n//       <>\n//       <div className={style.ShowCardDetails}>\n//         <div className={style.ShowcardHeader}>\n//           <h2>{cardName}</h2>\n//           <div className={style.editAndArcbtn}>\n//             <button type=\"button\" id=\"editBtn\" className={style.EditButton} onClick={handleEdit}>Edit</button>\n//             <button type=\"button\" id=\"archiveBtn\" className={style.ArchiveButton} onClick={handleArchive}>Archive</button>\n//           </div>\n//         </div>\n//         <small>in {childAgeGroup}</small>\n//         <div className=\"HorizontalLine\">\n//             <hr className=\"hrline\"></hr>\n//         </div>\n//         <h3>Description</h3><div>{descDetails}</div>\n//         <br/>\n//         <h3>Members</h3>\n//         <div>\n//           {teamDetail !== undefined &&\n//             teamDetail.map((i) => (\n//               <span className={style.cardMembers} key={i}>{i.charAt(0)}</span>\n//             ))}\n//         </div>\n//         <br/>\n//         <h3>Due Date</h3><div>{dateDetails}</div>\n//       </div>\n//       </>\n//   )\n//   :null;\n//   return (\n//     <div>\n//       <div className={style.CardData}>\n//       {cardData ?\n//         Object.entries(cardData).map((item) => (\n//           <div  key={item[0]}>\n//           <div className={style.CardInfo}      \n//                 id={item[0]}\n//                 value={item[1].cardTitle}\n//                 onClick={(e) =>\n//                   onCardClick(\n//                     item[1].cardTitle,\n//                     item[1].descrptn,\n//                     item[1].dueDate,\n//                     item[1].team,\n//                     item[0],\n//                     e\n//                   )\n//                 }\n//                 draggable=\"true\"\n//                 onDragStart={(e) => drag(item[1], item[0], e)}\n//                 >\n//           <div className={style.CardHeader}>\n//           <div className={style.CardName}>{item[1].cardTitle}</div>\n//           </div>\n//           <div className={style.CardIcon}>\n//           <div><i className=\"fas fa-list\"></i></div>\n//           <div>\n//                     {item[1].team !== undefined ? (\n//                       item[1].team.map((i) => (\n//                         <span className={style.cardMembers} key={i}>\n//                           {i.charAt(0)}\n//                         </span>\n//                       ))\n//                     ) : (\n//                       <div></div>\n//                     )}\n//                   </div>\n//           </div>\n//           </div>\n//           </div>\n//          ) ): <small className={style.NotaskAdd}>No Time Slots Added</small>}\n//           <div className={style.CardBtn}>\n//             <button className={style.AddCardBtn} onClick={() => setShowModal(true)} onDragOver={allowDrop} >Add a card</button>\n//           </div>\n//       </div>\n//         <br />\n//         {showModal && (\n//             <Modal  \n//                 content = {modalContent}\n//                 close = {modalCloseHandler}/> \n//         )}\n//        {showDetails && (\n//         <Modal  \n//             content = {showmodalContent}\n//             close = {showmodalCloseHandler}/> \n//     )}\n//     </div>\n// )\n// }\n// export default Card;","map":{"version":3,"sources":["/home/kido3/Desktop/Kido/kido-book-trial/src/components/Backend/card/Card.js"],"names":[],"mappingssourcesContent":["// import React, { useState, useEffect, useContext } from \"react\";\n// import style from \"./Card.module.css\";\n// import Modal from './../../../common/Modal/Modal';\n// import Axios from \"axios\";\n// import { AuthContext } from '../../../context/Auth';\n\n// function Card(props) {\n//   const { currentUser } = useContext(AuthContext);\n\n//   const [showModal, setShowModal] = useState(false);\n//   const { teacherName, scheduleDateId, groupId, childAgeGroup} = props;\n//   const [cardData, setCardData] = useState(\"\");\n\n//   // to handle details of card\n//   const [showDetails, setShowDetails] = useState(false);\n//   const [cardName, setCardName] = useState(\"\");\n//   const [descDetails, setDescDetails] = useState(\"\");\n//   const [dateDetails, setDateDetails] = useState(\"\");\n//   const [teamDetail, setTeamDetails] = useState([]);\n//   const [editDetails, setEditDetails] = useState(false);\n//   const [cardId, setCardId] = useState(\"\");\n\n//   const [isCardAdded, setIsCardAdded] = useState(false);\n//   const [isCardDelete, setIsCardDelete] = useState(false);\n//   const [isCardEdited, setIsCardEdited] = useState(false);\n\n//   const [cardTitle, setCardTitle] = useState(\"\");\n//   const [team, setTeam] = useState([]);\n//   const [descrptn, setDescrptn] = useState(\"\");\n//   const [dueDate, setDueDate] = useState(\"\");\n\n//   const [formComplete, setFormComplete] = useState(false);\n//   const [formIncompleteError, setFormIncompleteError] = useState(false);\n\n//   // to split members list string into array\n//   const memberArr = teacherName.split(\",\");\n\n//   const cardNames = React.useRef();\n//   const teamDetails = React.useRef();\n//   const descrpDetails = React.useRef();\n//   const datesDetails = React.useRef();\n\n//   const userId = currentUser.uid;\n\n//     // to Hide past date\n//     var today = new Date();\n//     var month,\n//       day = null;\n//     if (today.getMonth() < 10 || today.getDate() < 10) {\n//       month = \"0\" + (today.getMonth() + 1);\n//       day = \"0\" + today.getDate();\n//     }\n//     var date = today.getFullYear() + \"-\" + month + \"-\" + day;\n\n//     useEffect(() => {\n//       setIsCardAdded(false);\n//       setIsCardDelete(false);\n//       setIsCardEdited(false);\n//       getCardData();\n//     }, [isCardAdded, isCardDragged, isCardDelete, isCardEdited]);\n\n\n//   const getCardData = () => {\n//     Axios\n//     .get(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents/${boardId}/column/${columnId}/card.json`)\n//     .then((response) => {\n//         setCardData(response.data);\n//     })\n//     .catch((error) => console.log(error));\n// };\n\n  \n//   //  to Add and Edit cardData in DB\n//   const handleAddCardData = (e) => {\n//     //   check if all input is taken\n//     if(cardNames.current.value.length === 0 || teamDetails.current.value.length === 0 || descrpDetails.current.value.length === 0 || datesDetails.current.value.length === 0){\n//       setFormComplete(false);\n//       setFormIncompleteError(true);\n//     } else {\n//       // if user wants to edit then put request is used\n//       if (editDetails) {\n//         Axios\n//         .put(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents/${boardId}/column/${columnId}/card/${cardId}.json`,\n//           {\n//             cardTitle: cardTitle === \"\" ? cardName : cardTitle,\n//             team: team.length === 0 ? teamDetail : team,\n//             descrptn: descrptn === \"\" ? descDetails : descrptn,\n//             dueDate: dueDate === \"\" ? dateDetails : dueDate,\n//           }\n//         )\n//           .then((response) => {\n//             alert(\"card edited succesfully\");\n//             setIsCardEdited(true);\n//           })\n//           .catch((error) => console.log(\"Error in editDetails\" + error));\n//       }\n//       //  if user wants to add a new card\n//       else {\n//         Axios\n//         .post(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents/${boardId}/column/${columnId}/card.json`,\n//           {\n//             cardTitle: cardTitle,\n//             team: team,\n//             descrptn: descrptn,\n//             dueDate: dueDate,\n//           }\n//         )\n//           .then((response) => {\n//             alert(\"card added succesfully\");\n//             setIsCardAdded(true);\n//           })\n//           .catch((error) => console.log(\"Error\" + error));\n//       }\n\n//       setShowModal(false);\n//       setEditDetails(false);\n\n//       setCardTitle(\"\");\n//       setTeam([]);\n//       setDescrptn(\"\");\n//       setDueDate(\"\");\n//     }\n//   };\n\n//   // on click of card this function shows details\n//   const onCardClick = (\n//     cardName,\n//     descDetails,\n//     dateDetails,\n//     teamDetails,\n//     cardId,\n//     e\n//   ) => {\n//     setShowDetails(true);\n\n//     setCardName(cardName);\n//     setDescDetails(descDetails);\n//     setDateDetails(dateDetails);\n//     setTeamDetails(teamDetails);\n//     setCardId(cardId);\n//   };\n\n//    // handles edit button click\n//    const handleEdit = (e) => {\n//     setShowDetails(false);\n//     setShowModal(true);\n//     setEditDetails(true);\n//   };\n\n//   // handles archive on card archive click\n//   const handleArchive = (e) => {\n//     Axios\n//     .delete(`https://pro-organiser-app.firebaseio.com/${userId}/boardContents/${boardId}/column/${columnId}/card/${cardId}.json`)\n//       .then((response) => {\n//         alert(\"card archived succesfully\");\n//         setIsCardDelete(true);\n//       })\n//       .catch((error) => console.log(\"Error\" + error));\n\n//     setShowDetails(false);\n//   };\n\n// //To display multiple team member selected\n//   const onSelectChange = (e) => {\n//     const values = [...e.target.selectedOptions].map((opt) => opt.value);\n//     setTeam(values);\n//   };\n\n//   //to drag card\n//   const drag = (itemData, dragCardId, e) => {\n//     var draggedCard = {\n//       columnId: columnId,\n//       dragCardId: dragCardId,\n//       cardData: itemData,\n//     };\n\n//     e.dataTransfer.setData(\"text/plain\", JSON.stringify(draggedCard));\n//     console.log(e.dataTransfer.getData(\"text/plain\"));\n//   };\n\n//   //to drop card\n//   const allowDrop = (e) => {\n//     e.preventDefault();\n//   };\n\n//   const  modalCloseHandler = () => { setShowModal(false);setEditDetails(false);};\n\n//   const  showmodalCloseHandler = () => {setShowDetails(false)};\n\n//   //modal of Add and Edit Card\n//   let modalContent = showModal ? \n\n//   (\n//       <>\n//       {formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding Card</p> : null}\n//       <div className={style.AddCardForm}>\n//         <h2>{editDetails ? 'Edit Card' : 'Add Card'}</h2>\n//        <div className={style.FormInput}><span className={style.Lable}>Enter a title for your task:</span><br></br><input type=\"text\" id=\"title\" defaultValue={editDetails ? cardName : \"\"} placeholder=\"e.g. Add a new icon\" ref={cardNames} onChange={(e) => setCardTitle(e.target.value)}/></div>\n//        <div className={style.FormInput}><span className={style.Lable}>Choose members for this task(select multiple,if needed):</span><select  id=\"membersList\" name=\"membersList\" defaultValue={editDetails ? teamDetail : \"\"} multiple ref={teamDetails} onChange={onSelectChange}>{memberArr.map((item) => (<option value={item} key={item}>{item}</option>))}</select></div>\n//        <div className={style.FormInput}><span className={style.Lable}>Add the description for your task:</span><input id=\"description\" type=\"text\"  defaultValue={editDetails ? descDetails : \"\"} placeholder=\"Add your description here\" ref={descrpDetails}  onChange={(e) => setDescrptn(e.target.value)}/></div>\n//        <div className={style.FormInput}><span className={style.Lable}>Select the due-date for this task:</span><input id=\"due_date\" type=\"date\" min={date} defaultValue={editDetails ? dateDetails : \"\"} ref={datesDetails} onChange={(e) => setDueDate(e.target.value)}/></div>\n//       </div>\n//       <button className={style.AddButton} id=\"CreateCard\" disabled={formComplete} onClick={handleAddCardData}>{editDetails ? 'Edit Card' : 'Add Card'}</button>\n//       </>\n//   )\n//   :null;\n\n//   //modal of show card details\n//   let showmodalContent = showDetails ? \n\n//   (\n//       <>\n//       <div className={style.ShowCardDetails}>\n//         <div className={style.ShowcardHeader}>\n//           <h2>{cardName}</h2>\n//           <div className={style.editAndArcbtn}>\n//             <button type=\"button\" id=\"editBtn\" className={style.EditButton} onClick={handleEdit}>Edit</button>\n//             <button type=\"button\" id=\"archiveBtn\" className={style.ArchiveButton} onClick={handleArchive}>Archive</button>\n//           </div>\n//         </div>\n//         <small>in {childAgeGroup}</small>\n//         <div className=\"HorizontalLine\">\n//             <hr className=\"hrline\"></hr>\n//         </div>\n//         <h3>Description</h3><div>{descDetails}</div>\n//         <br/>\n//         <h3>Members</h3>\n//         <div>\n//           {teamDetail !== undefined &&\n//             teamDetail.map((i) => (\n//               <span className={style.cardMembers} key={i}>{i.charAt(0)}</span>\n//             ))}\n//         </div>\n//         <br/>\n//         <h3>Due Date</h3><div>{dateDetails}</div>\n//       </div>\n//       </>\n//   )\n//   :null;\n\n//   return (\n//     <div>\n//       <div className={style.CardData}>\n//       {cardData ?\n//         Object.entries(cardData).map((item) => (\n//           <div  key={item[0]}>\n//           <div className={style.CardInfo}      \n//                 id={item[0]}\n//                 value={item[1].cardTitle}\n//                 onClick={(e) =>\n//                   onCardClick(\n//                     item[1].cardTitle,\n//                     item[1].descrptn,\n//                     item[1].dueDate,\n//                     item[1].team,\n//                     item[0],\n//                     e\n//                   )\n//                 }\n//                 draggable=\"true\"\n//                 onDragStart={(e) => drag(item[1], item[0], e)}\n//                 >\n//           <div className={style.CardHeader}>\n//           <div className={style.CardName}>{item[1].cardTitle}</div>\n//           </div>\n//           <div className={style.CardIcon}>\n//           <div><i className=\"fas fa-list\"></i></div>\n//           <div>\n//                     {item[1].team !== undefined ? (\n//                       item[1].team.map((i) => (\n//                         <span className={style.cardMembers} key={i}>\n//                           {i.charAt(0)}\n//                         </span>\n//                       ))\n//                     ) : (\n//                       <div></div>\n//                     )}\n//                   </div>\n//           </div>\n//           </div>\n//           </div>\n//          ) ): <small className={style.NotaskAdd}>No Time Slots Added</small>}\n//           <div className={style.CardBtn}>\n//             <button className={style.AddCardBtn} onClick={() => setShowModal(true)} onDragOver={allowDrop} >Add a card</button>\n//           </div>\n//       </div>\n//         <br />\n//         {showModal && (\n        \n//             <Modal  \n//                 content = {modalContent}\n//                 close = {modalCloseHandler}/> \n//         )}\n       \n//        {showDetails && (\n        \n//         <Modal  \n//             content = {showmodalContent}\n//             close = {showmodalCloseHandler}/> \n//     )}\n\n//     </div>\n// )\n// }\n\n// export default Card;\n"]},"metadata":{},"sourceType":"module"}